/**
 * <%= model.label%> model.
 *
 * Auto-generated by modelGenerator.
 *
 * @author  Nicolas Iglesias <nico@webpolis.com.ar> for daturajs - https://github.com/webpolis/daturajs -
 * @class   <%= model.name%>
 * @date    <%= Date()%>
 */
var inflector = require('inflector');

exports.model = {
    // access your variables by adding the $$ prefix
    name : '<%= model.name%>',
    // map your database columns here
    fields : [
    <% for (var f in model.fields){%>
        {name : '<%= model.fields[f].name%>', label : '<%= model.fields[f].label%>'.humanize(), type : '<%= model.fields[f].type%>', required : <%= model.fields[f].required? 'true':'false' %>, primaryKey : <%= model.fields[f].primaryKey? 'true':'false' %>, max : <%= model.fields[f].max%>},
    <% }%>
    ],
    // place your custom model methods below.
    methods : {
        $instanceMethod : function(){ console.log('Prefix your instance methods\' name with a dollar sign ($). Example: model.$instanceMethod()');},
        classMethod : function(){ console.log('This class method is accesed statically. Example: this.models.modelName.classMethod()');},
        getListableColumns : function(){ return ['<%= fieldsList.join('\', \'') %>'];},
        <% if (model.isAuthModel) {%>
        auth: function(data, cbk){
            this.find('one',{
                conditions:[
                    "username = ':username' AND password = ':password'"
                ],
                params:{
                    username: data.username, 
                    password: data.password
                },
                fields:['id','username']
            },function(user){
                /**
                 * Make only a few fields available to the auth object when saving cookie 
                 * by passing an array of fields names as 2nd argument to callback.
                 */
                cbk(user)
            });
        },
        <% }%>
        
        /**
         * Run before saving a model.
         * You can pre-process the attributes here.
         *
         * @method  $beforeSave
         * @param   {Object}    Attributes and its values.
         * @param   {Function}  Execute this callback when you're done processing the attributes.
         *                      Pass the modified attributes as the 1st argument.
         */
        $beforeSave : function(attrs, cbk){
            cbk(attrs);
        },
        
        /**
         * Run after a model has been saved.
         *
         * @method  $afterSave
         * @param   {Function}  Execute this callback when you're done doing additional processing.
         */
        $afterSave : function(cbk){
            cbk();
        },
        
        /**
         * Run before a finder query is executed.
         * You can pre-process the conditions and options here.
         *
         * @method  $beforeFind
         * @param   {String}    Find method. Can be 'all','one','min','max' or 'count'.
         * @param   {Object}    Options to be applied to the final query.
         * @param   {Function}  Execute this callback when you're done processing the options.
         */
        $beforeFind : function(findType, options, cbk){
            cbk();
        },
        
        /**
         * Run after a finder query is executed.
         * You can pre-process the resulting data here.
         *
         * @method  $afterFind
         * @param   {Mixed}     Can be array or one object containing results, depending on the find method chosen.
         * @param   {Function}  Execute this callback when you're done processing the results.
         *                      Pass the processed results as unique argument.
         */
        $afterFind : function(results, cbk){
            cbk(results);
        }
    },
    relations : {
        hasOne:[],
        hasMany:[],
        belongsTo:[],
    }
}