{
    "project": {},
    "files": {
        "lib/adapters/db.js": {
            "name": "lib/adapters/db.js",
            "modules": {
                "db": 1
            },
            "classes": {
                "db": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/components/auth.js": {
            "name": "lib/components/auth.js",
            "modules": {
                "auth": 1
            },
            "classes": {
                "auth": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/components/object.js": {
            "name": "lib/components/object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/components/validator.js": {
            "name": "lib/components/validator.js",
            "modules": {
                "validator": 1
            },
            "classes": {
                "validator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/console/modelGenerator.js": {
            "name": "lib/console/modelGenerator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/controllers/rest/baseController.js": {
            "name": "lib/controllers/rest/baseController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/controllers/rest/index.js": {
            "name": "lib/controllers/rest/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/controllers/baseController.js": {
            "name": "lib/controllers/baseController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/controllers/index.js": {
            "name": "lib/controllers/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/helpers/index.js": {
            "name": "lib/helpers/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/models/baseModel.js": {
            "name": "lib/models/baseModel.js",
            "modules": {},
            "classes": {
                "baseModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/models/index.js": {
            "name": "lib/models/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/bootstrap.js": {
            "name": "lib/bootstrap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/core.js": {
            "name": "lib/core.js",
            "modules": {
                "core": 1
            },
            "classes": {
                "core": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "db": {
            "name": "db",
            "submodules": {},
            "classes": {
                "db": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/adapters/db.js",
            "line": 20,
            "description": "Database adapter.\n\nThis adapter acts as a proxy within your application and the ORM module chosen.\nCurrently it only supports Sequelize - http://www.sequelizejs.com/ - but more \nwill be added in the future.\n\nSupported adapters' strings: sequelize",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>"
        },
        "auth": {
            "name": "auth",
            "submodules": {},
            "classes": {
                "auth": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/components/auth.js",
            "line": 36,
            "description": "Basic authentication mechanism.\n\nThe Auth Component currently does basically a few things:\n\nWhen initialized, it will lookup at the settings - src/config/main.js - and will \nlisten to any request made to the selected login route - config.loginUrl -.\nAfterwards, will instantiate the selected model - config.model - and will use \nmodel's 'auth' method to execute custom authentication logic (db lookup, etc).\nInternally, a cookie is generated - named 'auth' - containing basic user information.\n\nThe configuration parameters are as follow:\n\nloginUrl     - URL receiving POST fields for user information (username, password).",
            "todo": [
                "logoutUrl    - URL that will clear cookies and redirect the user.\n\nThe chosen model must implement 'auth' method as a non-instance method",
                "so it should be accessible as modelName.auth().\n\n'auth' method's signature is:"
            ],
            "params": [
                {
                    "name": "username",
                    "description": "and password fields, or custom object.",
                    "type": "Object"
                },
                {
                    "name": "Callback",
                    "description": "function to be executed when done. You should pass \n                     your user/custom object as the argument, which will be set \n                     as the 'auth' cookie. An optional 2nd argument is an array of \n                     fields that will be available in the cookie; otherwise, all fields \n                     are going to be saved in the 'auth' cookie (BEWARE! not to show passwords).",
                    "type": "Function"
                }
            ],
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>"
        },
        "validator": {
            "name": "validator",
            "submodules": {},
            "classes": {
                "validator": 1,
                "baseModel": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/models/baseModel.js",
            "line": 7,
            "description": "Validation module.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>"
        },
        "core": {
            "name": "core",
            "submodules": {},
            "classes": {
                "core": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/core.js",
            "line": 13,
            "description": "Main core file for custom framework implementation.\n\nThis module exports an object which have access to different components and \nhelpers to be made available to either models or controllers.\nAlso, it stores a reference to existing models so they can be accessed from any controller \nvia this.models.",
            "author": "Nicolas Iglesias <nicolas@cleversight.biz>"
        }
    },
    "classes": {
        "db": {
            "name": "db",
            "shortname": "db",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "db",
            "namespace": "",
            "file": "lib/adapters/db.js",
            "line": 20
        },
        "auth": {
            "name": "auth",
            "shortname": "auth",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "auth",
            "namespace": "",
            "file": "lib/components/auth.js",
            "line": 36
        },
        "validator": {
            "name": "validator",
            "shortname": "validator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "validator",
            "namespace": "",
            "file": "lib/components/validator.js",
            "line": 11
        },
        "baseModel": {
            "name": "baseModel",
            "shortname": "baseModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "validator",
            "namespace": "",
            "file": "lib/models/baseModel.js",
            "line": 7
        },
        "core": {
            "name": "core",
            "shortname": "core",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "lib/core.js",
            "line": 13
        }
    },
    "classitems": [
        {
            "file": "lib/adapters/db.js",
            "line": 24,
            "description": "Will make available all the relationships for the final model object.",
            "itemtype": "method",
            "name": "_defineRelationsGettersAndSetters",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "The",
                    "description": "ORM model's instance.",
                    "type": "Object"
                },
                {
                    "name": "The",
                    "description": "final model's instance.",
                    "type": "Object"
                }
            ],
            "class": "db",
            "module": "db"
        },
        {
            "file": "lib/adapters/db.js",
            "line": 59,
            "description": "The initialization will instantiate the ORM, by providing database parameters \nand doing the appropiate startup sequence for the chosen ORM module.\nThis method must be run before any other method in this module.",
            "itemtype": "method",
            "name": "initialize",
            "class": "db",
            "module": "db"
        },
        {
            "file": "lib/adapters/db.js",
            "line": 95,
            "description": "Get new ORM model's instance.\nThis method will return a new instance of the given model in its ORM's specific format, \nby using the appropiate method defined by the chosen ORM module.",
            "params": [
                {
                    "name": "Name",
                    "description": "of model to import.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "loadORMModel",
            "return": {
                "description": "ORM model.",
                "type": "Object"
            },
            "class": "db",
            "module": "db"
        },
        {
            "file": "lib/adapters/db.js",
            "line": 181,
            "description": "This will convert the provided ORM model's instance into a  \nbaseModel instance.",
            "params": [
                {
                    "name": "ORM.",
                    "description": "ORM's specific model instance.",
                    "type": "Object"
                },
                {
                    "name": "Base.",
                    "description": "model's instance.",
                    "type": "Object"
                },
                {
                    "name": "With.",
                    "description": "Names of associated models to be attached to the \n                     returning model.",
                    "type": "Array"
                },
                {
                    "name": "Internal",
                    "description": "usage. Only return selected fields.",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "getLocalModelFromORM",
            "return": {
                "description": "This framework's compatible model.",
                "type": "Object"
            },
            "class": "db",
            "module": "db"
        },
        {
            "file": "lib/adapters/db.js",
            "line": 285,
            "params": [
                {
                    "name": "Optional",
                    "description": "ORM model to be refreshed.",
                    "type": "Object"
                },
                {
                    "name": "Only",
                    "description": "return and do not refresh lib.core.models",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setupRelationships",
            "class": "db",
            "module": "db"
        },
        {
            "file": "lib/components/auth.js",
            "line": 43,
            "description": "Listen to login/logout requests and provide custom authentication mechanism.",
            "params": [
                {
                    "name": "Request.",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "Response.",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "Continue",
                    "description": "expressjs initialization.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "initialize",
            "class": "auth",
            "module": "auth"
        },
        {
            "file": "lib/components/auth.js",
            "line": 96,
            "description": "Returns an instance of the already initialized auth object, which may \ncontain authenticated user's information.",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "auth",
            "module": "auth"
        },
        {
            "file": "lib/components/object.js",
            "line": 1,
            "description": "Low level Javascript Object manipulation.\nVarious tools and added features applied to the most basic form of framework's objects.\n\nHandle with care.",
            "author": "Nicolas Iglesias <nicolas@cleversight.com>",
            "class": "validator",
            "module": "auth"
        },
        {
            "file": "lib/console/modelGenerator.js",
            "line": 1,
            "description": "Generates daturajs models based on provided database schema.\nAt the moment, only supporting Postgresql and Sequelize ORM.\n\nInternally, this script will fetch all tables names using the db configuration \nset in src/config/main.js and will generate a new model in src/models for each.",
            "todo": [
                "Obtain foreign indexes and generate appropiate \"model association\" source code.\n\nATTENTION! This will overwrite existing models."
            ],
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/console/modelGenerator.js",
            "line": 83,
            "description": "\"+r.table_name.singular().humanize()+\" model.\\n\\\n\\n\\\nAuto-generated by modelGenerator.\\n\\\n\\n\\",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>\\n\\\n/\\n\\\n\";\n       o.fileHeader += \"\\\nvar inflector = require('inflector');\\n\\\n\\n\\\nexports.model = {\\\n\";\n       o.fileBody = '';\n       o.queryColumns = qc.replace(/\\$\\$table/gi,r.table_name);\n       o.fileFooter = '}';\n       tables[r.table_name] = o;\n   });\n   qtt.on('end',function(){\n       for(var t in tables){\n           if(modelName!== null && modelName !== t.singular()) continue;\n           \n           var qqc = client.query(tables[t].queryColumns);\n           qqc.on('row',function(c){\n               if(typeof tables[c.table].columns === 'undefined')\n                   tables[c.table].columns = [];\n               tables[c.table].columns.push(c);\n           });\n           qqc.on('end',function(){\n               });\n       }\n       \n       setTimeout(function(){\n           client.end();\n           \n           for(tt in tables){\n               if(modelName!== null && modelName !== tt.singular()) continue;\n               \n               tables[tt].fileBody = \"\\t// access your variables by adding the $$ prefix\\n\";\n               tables[tt].fileBody += \"\\tname : '\"+tt.singular()+\"',\\n\";\n               tables[tt].fileBody += \"\\t// map your database columns here\\n\\tfields : [\\n\";\n               tables[tt].columns.forEach(function(c){\n                   var type = /int\\d+/.test(c.Type) ? typeMap['int'] : typeMap[c.Type];\n                   var props = [\n                   'name : \\''+c.Field+'\\'',\n                   'label : \\''+c.Field+'\\'.humanize()',\n                   'type : \\''+type+'\\'',\n                   'required : '+(c.Null?'false':'true')\n                   ];\n                   \n                   if(type === typeMap['int'] && c.Field === 'id')\n                       props.push('primaryKey : true');\n                   if(c.length_var!==-1)\n                       props.push('max : '+c.Length);\n                   \n                   tables[tt].fileBody += '\\t\\t{'+props.join(', ')+'},\\n';\n               });\n               tables[tt].fileBody += '\\t],\\n'\n               tables[tt].fileBody += ''\n               +'\\t// place your custom model methods below.\\n'\n               +'\\tmethods : {\\n'\n               +\"\\t\\t$instanceMethod : function(){ console.log('Prefix your instance methods\\\\' name with a dollar sign ($). Example: model.$instanceMethod()');},\\n\"\n               +\"\\t\\tclassMethod : function(){ console.log('This class method is accesed statically. Example: this.models.modelName.classMethod()');}\\n\"\n               +'\\t},\\n'\n               +'\\trelations : {\\n'\n               +'\\t\\thasOne:[],\\n'\n               +'\\t\\thasMany:[],\\n'\n               +'\\t\\tbelongsTo:[],\\n'\n               +'\\t}';\n               \n               var content = [\n               tables[tt].fileHeader,\n               tables[tt].fileBody,\n               tables[tt].fileFooter\n               ];\n               var fname = path.resolve(__dirname+'/../../src/models/'+tt.singular().toLowerCase()+'.js');\n\n               console.log('Saving '+tt.singular()+' model into '+fname);\n               fs.writeFile(fname,content.join('\\n'),function(err){\n                   if (err) throw err;\n               });\n           }\n       }, 5000);\n   });\n});",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/controllers/rest/baseController.js",
            "line": 1,
            "description": "Base controller for REST Api.\n\nThis is the base class for all the REST controllers in the application.\nVarious helpful methods will be implemented from time to time, that will be made \navailable to all REST controllers.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/controllers/rest/index.js",
            "line": 1,
            "description": "REST Controllers initialization.\n\nYou will not likely need to modify this file.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/controllers/rest/index.js",
            "line": 16,
            "description": "Used internally.",
            "itemtype": "method",
            "name": "_defineAndFinish",
            "params": [
                {
                    "name": "Controller",
                    "description": "object.",
                    "type": "Object"
                },
                {
                    "name": "Controller's",
                    "description": "name.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/controllers/baseController.js",
            "line": 1,
            "description": "Base controller.\n\nThis is the base class for all the controllers in the application.\nVarious helpful methods will be implemented from time to time, that will be made \navailable to all controllers.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/controllers/index.js",
            "line": 1,
            "description": "Controllers initialization.\n\nYou will not likely need to modify this file.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/controllers/index.js",
            "line": 16,
            "description": "Used internally.",
            "itemtype": "method",
            "name": "_defineAndFinish",
            "params": [
                {
                    "name": "Controller",
                    "description": "object.",
                    "type": "Object"
                },
                {
                    "name": "Controller's",
                    "description": "name.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/helpers/index.js",
            "line": 1,
            "description": "Helpers initialization.\n\nHelpers libraries will be instantiated here.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/models/baseModel.js",
            "line": 24,
            "description": "Gets a new instance of the current model.\nOptionally define its default attributes.",
            "params": [
                {
                    "name": "Optional.",
                    "description": "Default attributes for new instance.",
                    "type": "Object"
                },
                {
                    "name": "Unimplemented.",
                    "description": "Optional associated models to be retrieved.",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "The model's instance.",
                "type": "Object"
            },
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/models/baseModel.js",
            "line": 43,
            "description": "Run before saving a model.\nYou can pre-process the attributes here.",
            "itemtype": "method",
            "name": "$beforeSave",
            "params": [
                {
                    "name": "Attributes",
                    "description": "and its values.",
                    "type": "Object"
                },
                {
                    "name": "Execute",
                    "description": "this callback when you're done processing the attributes.\n                     Pass the modified attributes as the 1st argument.",
                    "type": "Function"
                }
            ],
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/models/baseModel.js",
            "line": 55,
            "description": "Run after a model has been saved.",
            "itemtype": "method",
            "name": "$afterSave",
            "params": [
                {
                    "name": "Execute",
                    "description": "this callback when you're done doing additional processing.",
                    "type": "Function"
                }
            ],
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/models/baseModel.js",
            "line": 64,
            "description": "Run before a finder query is executed.\nYou can pre-process the conditions and options here.",
            "itemtype": "method",
            "name": "$beforeFind",
            "params": [
                {
                    "name": "Find",
                    "description": "method. Can be 'all','one','min','max' or 'count'.",
                    "type": "String"
                },
                {
                    "name": "Options",
                    "description": "to be applied to the final query.",
                    "type": "Object"
                },
                {
                    "name": "Execute",
                    "description": "this callback when you're done processing the options.",
                    "type": "Function"
                }
            ],
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/models/baseModel.js",
            "line": 76,
            "description": "Run after a finder query is executed.\nYou can pre-process the resulting data here.",
            "itemtype": "method",
            "name": "$afterFind",
            "params": [
                {
                    "name": "Can",
                    "description": "be array or one object containing results, depending on the find method chosen.",
                    "type": "Mixed"
                },
                {
                    "name": "Execute",
                    "description": "this callback when you're done processing the results.\n                     Pass the processed results as unique argument.",
                    "type": "Function"
                }
            ],
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/models/baseModel.js",
            "line": 88,
            "itemtype": "method",
            "name": "$find",
            "params": [
                {
                    "name": "Can",
                    "description": "be 'all', 'one', 'min', 'max' or 'count'",
                    "type": "String"
                },
                {
                    "name": "Additional",
                    "description": "options. Includes 'with' (array of related models \n                     to be included in returning results), 'conditions', 'limit' and 'offset'.",
                    "type": "Object"
                },
                {
                    "name": "Callback",
                    "description": "to be executed when done",
                    "type": "Function"
                }
            ],
            "class": "baseModel",
            "module": "validator"
        },
        {
            "file": "lib/models/index.js",
            "line": 1,
            "description": "Models initialization file.\n\nYou will not likely need to modify this file.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "core",
            "module": "validator"
        },
        {
            "file": "lib/bootstrap.js",
            "line": 1,
            "description": "Bootstrap module. General setup, routes and environment initialization.\n\nAll the application is initialized here.",
            "todo": [
                "Include src/bootstrap.js for custom initialization.\n\nYou will not likely need to modify this file."
            ],
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "core",
            "module": "validator"
        },
        {
            "file": "lib/bootstrap.js",
            "line": 20,
            "description": "The following is a list of path strings widely accessed by this application.",
            "class": "core",
            "module": "validator"
        },
        {
            "file": "lib/core.js",
            "line": 17,
            "description": "A list of models classes to be accesed statically from any controller.\nExample:\n\nthis.models.myModel",
            "itemtype": "property",
            "name": "models",
            "type": "{Array}",
            "class": "core",
            "module": "core"
        },
        {
            "file": "lib/core.js",
            "line": 27,
            "description": "A list of ORM models. This is only used internally, so you will not need it \nanyway.",
            "itemtype": "property",
            "name": "ormModels",
            "type": "{Array}",
            "class": "core",
            "module": "core"
        },
        {
            "file": "lib/index.js",
            "line": 1,
            "description": "Base library initialization.\n\nCore libraries will be instantiated here.",
            "author": "Nicolas Iglesias <nico@webpolis.com.ar>",
            "class": "",
            "module": "core"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nLow level Javascript Object manipulation.\nVarious tools and added features applied to the most basic form of framework's objects.\n\nHandle with care.",
            "line": " lib/components/object.js:1"
        },
        {
            "message": "Missing item type\nGenerates daturajs models based on provided database schema.\nAt the moment, only supporting Postgresql and Sequelize ORM.\n\nInternally, this script will fetch all tables names using the db configuration \nset in src/config/main.js and will generate a new model in src/models for each.",
            "line": " lib/console/modelGenerator.js:1"
        },
        {
            "message": "Missing item type\n\"+r.table_name.singular().humanize()+\" model.\\n\\\n\\n\\\nAuto-generated by modelGenerator.\\n\\\n\\n\\",
            "line": " lib/console/modelGenerator.js:83"
        },
        {
            "message": "Missing item type\nBase controller for REST Api.\n\nThis is the base class for all the REST controllers in the application.\nVarious helpful methods will be implemented from time to time, that will be made \navailable to all REST controllers.",
            "line": " lib/controllers/rest/baseController.js:1"
        },
        {
            "message": "Missing item type\nREST Controllers initialization.\n\nYou will not likely need to modify this file.",
            "line": " lib/controllers/rest/index.js:1"
        },
        {
            "message": "Missing item type\nBase controller.\n\nThis is the base class for all the controllers in the application.\nVarious helpful methods will be implemented from time to time, that will be made \navailable to all controllers.",
            "line": " lib/controllers/baseController.js:1"
        },
        {
            "message": "Missing item type\nControllers initialization.\n\nYou will not likely need to modify this file.",
            "line": " lib/controllers/index.js:1"
        },
        {
            "message": "Missing item type\nHelpers initialization.\n\nHelpers libraries will be instantiated here.",
            "line": " lib/helpers/index.js:1"
        },
        {
            "message": "Missing item type\nModels initialization file.\n\nYou will not likely need to modify this file.",
            "line": " lib/models/index.js:1"
        },
        {
            "message": "Missing item type\nBootstrap module. General setup, routes and environment initialization.\n\nAll the application is initialized here.",
            "line": " lib/bootstrap.js:1"
        },
        {
            "message": "Missing item type\nThe following is a list of path strings widely accessed by this application.",
            "line": " lib/bootstrap.js:20"
        },
        {
            "message": "Missing item type\nBase library initialization.\n\nCore libraries will be instantiated here.",
            "line": " lib/index.js:1"
        }
    ]
}